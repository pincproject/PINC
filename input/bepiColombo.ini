;
; @file			bepiColombo.ini
; @author		Trym Erik Nielsen <trymen@math.uio.no>
; @copyright	University of Oslo, Norway
; @brief		PINC input file for MMO at perihelion.
; @date			05.07.19
;

[files]
output = data/							; data file path (including filename prefix)

[objects]
objects = data/obj.grid.h5 				;paths to objects

[msgfiles]
parsedump = parsedump.txt				; Info on how input was parsed

[time]
nTimeSteps = 50					    ; Number of time steps
timeStep = 5e-7						; Time step (in 1/omega_p of specie 0)
startTime = 50.0                         ; Start time, in case of continuing a simulation

; Use comma-separated lists to specify several dimensions.
[grid]
nDims=3
nSubdomains=1,1,1						; Number of subdomains
nEmigrantsAlloc=1 pc, 2 pc, 4 pc		; Number of particles to allocate for (corner, edge, face)
debye= 1.0    						; Debye length of specie 0 (in meters)
trueSize=64,64,64						; Number of (true) grid points per MPI node
stepSize=0.2							; Cell size (in Debye lengths of specie 0)
nGhostLayers = 1						; Number of Ghost points [x_min, y_min,...,x_max,...]
thresholds=0.1							; Thresholds for particle migration
boundaries = PERIODIC       			; Boundary conditions at edges


; Domain size computed as (nSubdomains*trueSize-1)*stepSize

[fields]
BExt=0,0,0								; Externally imposed B-field
EExt=0,0,0								; Externally imposed E-field

[population]
; Use comma-separated lists to specify several species.
; The first specie is used for normalizing
nSpecies = 2
nParticles = 70 pc
nAlloc = 128 pc							; Number of particles to allocate memory for
density = 8.75e3,8.75e3
charge = -1,1
mass = 1,1836
multiplicity = auto

thermalVelocity = 400000, 74200 ;,0.00046
;thermalVelocity = 0,0
maxVel = 1
drift = 0
perturbAmplitude = 0,0,0,0,0,0
perturbMode = 0,0,0,0,0,0

[methods]
; TBD: which solvers/algorithms to use?!
normalization = semiSI
mode = regular
poisson = mgSolver
acc = puAcc3D1KE
distr = puDistr3D1
migrate = puExtractEmigrants3D

[multigrid]
; Specific parameters of each algorithm? E.g. depth of MG, BCs
cycle           = mgVRecursive             	; Choice of mg cycle type
preSmooth       = gaussSeidelRB				; Choice of presmoother method (Only 1 possible option yet)
postSmooth      = gaussSeidelRB	    		; Choice of postsmoother method
coarseSolver    = gaussSeidelRB 			; Choice of coarse grid solver
;runNumber       = 0
mgLevels        = 5							; Number of Multigrid levels
mgCycles        = 15						; Number of cycles
nPreSmooth      = 10						; Number of iterations for the presmoother
nPostSmooth     = 10						; Number of iterations for the postsmoother
nCoarseSolve    = 10
prolongator     = bilinear					; Prolongation stencil
restrictor      = halfWeight				; Restrictor stencil
